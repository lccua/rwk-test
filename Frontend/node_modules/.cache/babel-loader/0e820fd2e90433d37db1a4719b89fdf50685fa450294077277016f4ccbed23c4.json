{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport useAuthContext from \"../context/useAuthContext\";\nimport useConversation from \"../zustand/useConversation\";\nimport useMessage from \"../zustand/useMessage\";\nexport const useCreateConversation = () => {\n  _s();\n  //loading and error state\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //context\n  const {\n    user\n  } = useAuthContext();\n  const {\n    setNewConversation\n  } = useConversation();\n  const {\n    setMessages\n  } = useMessage();\n\n  // react-router history\n  const navigate = useNavigate();\n  const createConversation = async conversationName => {\n    setIsLoading(true);\n    setError(null);\n    console.log(\"tsetstst: \" + conversationName);\n    const conversationData = {\n      conversationName\n    };\n    const response = await fetch('/api/conversations', {\n      method: 'POST',\n      body: JSON.stringify(conversationData),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    const responseJson = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(responseJson.error);\n    }\n    if (response.ok) {\n      setNewConversation(responseJson);\n\n      // update the URL with the new conversationId\n      navigate(`/conversations/${responseJson.id}`);\n      setMessages([]);\n      setIsLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    error,\n    createConversation\n  };\n};\n_s(useCreateConversation, \"DySOPKROH1/ouRMTTEEQv9l3MpE=\", false, function () {\n  return [useAuthContext, useConversation, useMessage, useNavigate];\n});","map":{"version":3,"names":["useState","useNavigate","useAuthContext","useConversation","useMessage","useCreateConversation","_s","isLoading","setIsLoading","error","setError","user","setNewConversation","setMessages","navigate","createConversation","conversationName","console","log","conversationData","response","fetch","method","body","JSON","stringify","headers","token","responseJson","json","ok","id"],"sources":["C:/Users/luca/Documents/Websites/SERN-app/frontend/src/hooks/conversation/useCreateConversastion.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport useAuthContext from \"../context/useAuthContext\";\r\nimport useConversation from \"../zustand/useConversation\";\r\nimport useMessage from \"../zustand/useMessage\";\r\n\r\n\r\nexport const useCreateConversation = () => {\r\n  //loading and error state\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  //context\r\n  const { user } = useAuthContext();\r\n  const { setNewConversation } = useConversation();\r\n  const { setMessages } = useMessage();\r\n\r\n  // react-router history\r\n  const navigate = useNavigate();\r\n\r\n\r\n  const createConversation = async (conversationName) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    console.log(\"tsetstst: \" + conversationName);\r\n\r\n    const conversationData = { conversationName }\r\n\r\n    const response = await fetch('/api/conversations', {\r\n      method: 'POST',\r\n      body: JSON.stringify(conversationData),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`\r\n      }\r\n    });\r\n    const responseJson = await response.json();\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n      setError(responseJson.error);\r\n    }\r\n\r\n    if (response.ok) {\r\n      setNewConversation(responseJson);\r\n\r\n      // update the URL with the new conversationId\r\n      navigate(`/conversations/${responseJson.id}`);\r\n      setMessages([])\r\n\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return { isLoading, error, createConversation };\r\n};\r\n\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,eAAe,MAAM,4BAA4B;AACxD,OAAOC,UAAU,MAAM,uBAAuB;AAG9C,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzC;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAM;IAAEW;EAAK,CAAC,GAAGT,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEU;EAAmB,CAAC,GAAGT,eAAe,CAAC,CAAC;EAChD,MAAM;IAAEU;EAAY,CAAC,GAAGT,UAAU,CAAC,CAAC;;EAEpC;EACA,MAAMU,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAG9B,MAAMc,kBAAkB,GAAG,MAAOC,gBAAgB,IAAK;IACrDR,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEdO,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGF,gBAAgB,CAAC;IAE5C,MAAMG,gBAAgB,GAAG;MAAEH;IAAiB,CAAC;IAE7C,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;MACjDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,gBAAgB,CAAC;MACtCO,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASf,IAAI,CAACgB,KAAM;MACxC;IACF,CAAC,CAAC;IACF,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAE1C,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChBtB,YAAY,CAAC,KAAK,CAAC;MACnBE,QAAQ,CAACkB,YAAY,CAACnB,KAAK,CAAC;IAC9B;IAEA,IAAIW,QAAQ,CAACU,EAAE,EAAE;MACflB,kBAAkB,CAACgB,YAAY,CAAC;;MAEhC;MACAd,QAAQ,CAAE,kBAAiBc,YAAY,CAACG,EAAG,EAAC,CAAC;MAC7ClB,WAAW,CAAC,EAAE,CAAC;MAEfL,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAED,SAAS;IAAEE,KAAK;IAAEM;EAAmB,CAAC;AACjD,CAAC;AAACT,EAAA,CAjDWD,qBAAqB;EAAA,QAMfH,cAAc,EACAC,eAAe,EACtBC,UAAU,EAGjBH,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}