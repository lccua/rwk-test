{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport useAuthContext from \"../context/useAuthContext\";\nimport useMessage from \"../zustand/useMessage\";\nexport const useSendMessage = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const {\n    user\n  } = useAuthContext();\n  const {\n    setNewMessage\n  } = useMessage();\n  const sendMessage = async (conversationId, messageContent, isFuture) => {\n    setIsLoading(true);\n    setError(null);\n\n    // data that will be passed to the POST body\n    const messageData = {\n      conversationId,\n      messageContent,\n      isFuture\n    };\n    const response = await fetch('/api/messages', {\n      method: 'POST',\n      body: JSON.stringify(messageData),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${user.token}`\n      }\n    });\n    const responseJson = await response.json();\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(responseJson.error);\n    }\n    if (response.ok) {\n      setNewMessage(responseJson);\n      setIsLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    error,\n    sendMessage\n  };\n};\n_s(useSendMessage, \"BEf7EZCyrW+4XGXQyvUxUbL1a1g=\", false, function () {\n  return [useAuthContext, useMessage];\n});","map":{"version":3,"names":["useState","useAuthContext","useMessage","useSendMessage","_s","isLoading","setIsLoading","error","setError","user","setNewMessage","sendMessage","conversationId","messageContent","isFuture","messageData","response","fetch","method","body","JSON","stringify","headers","token","responseJson","json","ok"],"sources":["C:/Users/luca/Documents/Websites/SERN-app/frontend/src/hooks/message/useSendMessage.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport useAuthContext from \"../context/useAuthContext\";\r\nimport useMessage from \"../zustand/useMessage\";\r\n\r\nexport const useSendMessage = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { user } = useAuthContext();\t\r\n  const { setNewMessage } = useMessage();\r\n\r\n\r\n  const sendMessage = async (conversationId, messageContent, isFuture) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // data that will be passed to the POST body\r\n    const messageData = {conversationId, messageContent, isFuture}\r\n\r\n    const response = await fetch('/api/messages', {\r\n      method: 'POST',\r\n      body: JSON.stringify(messageData),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${user.token}`\r\n      },\r\n    })\r\n\r\n    const responseJson = await response.json()\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n      setError(responseJson.error);\r\n    }\r\n\r\n    if (response.ok) {\r\n      setNewMessage(responseJson)\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return { isLoading, error, sendMessage };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,UAAU,MAAM,uBAAuB;AAE9C,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM;IAAES;EAAK,CAAC,GAAGR,cAAc,CAAC,CAAC;EACjC,MAAM;IAAES;EAAc,CAAC,GAAGR,UAAU,CAAC,CAAC;EAGtC,MAAMS,WAAW,GAAG,MAAAA,CAAOC,cAAc,EAAEC,cAAc,EAAEC,QAAQ,KAAK;IACtER,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,MAAMO,WAAW,GAAG;MAACH,cAAc;MAAEC,cAAc;MAAEC;IAAQ,CAAC;IAE9D,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC;MACjCO,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASb,IAAI,CAACc,KAAM;MACxC;IACF,CAAC,CAAC;IAEF,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAE1C,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChBpB,YAAY,CAAC,KAAK,CAAC;MACnBE,QAAQ,CAACgB,YAAY,CAACjB,KAAK,CAAC;IAC9B;IAEA,IAAIS,QAAQ,CAACU,EAAE,EAAE;MACfhB,aAAa,CAACc,YAAY,CAAC;MAC3BlB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAED,SAAS;IAAEE,KAAK;IAAEI;EAAY,CAAC;AAC1C,CAAC;AAACP,EAAA,CAtCWD,cAAc;EAAA,QAIRF,cAAc,EACLC,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}