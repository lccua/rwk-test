{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport useVerificationContext from '../context/useVerificationContext';\nexport const useOtpVerification = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n  const {\n    verification\n  } = useVerificationContext();\n  const otpVerification = async inputOtp => {\n    setIsLoading(true);\n    setError(null);\n    console.log(inputOtp);\n    const response = await fetch(\"/api/user/otp-verification\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: verification.user.email,\n        otp: inputOtp\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    if (!response.ok) {\n      setIsLoading(false);\n      setError(json.error);\n      return false;\n    }\n    if (response.ok) {\n      setIsLoading(false);\n      return true;\n    }\n  };\n  return {\n    otpVerification,\n    isLoading,\n    error\n  };\n};\n_s(useOtpVerification, \"gFbaO75kO3MZcd5mzGF0TB3Dyp0=\", false, function () {\n  return [useVerificationContext];\n});","map":{"version":3,"names":["useState","useVerificationContext","useOtpVerification","_s","error","setError","isLoading","setIsLoading","verification","otpVerification","inputOtp","console","log","response","fetch","method","headers","body","JSON","stringify","email","user","otp","json","ok"],"sources":["C:/Users/luca/Documents/Websites/SERN-app/frontend/src/hooks/verification/useOtpVerification.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport useVerificationContext from '../context/useVerificationContext'\r\n\r\n\r\nexport const useOtpVerification = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const { verification } = useVerificationContext()\r\n\r\n\r\n\r\n  const otpVerification = async (inputOtp) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    console.log(inputOtp)\r\n\r\n    const response = await fetch(\"/api/user/otp-verification\", {\r\n\r\n      method: \"POST\",\r\n      headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      },\r\n      \r\n      body: JSON.stringify({ email: verification.user.email , otp: inputOtp }),\r\n      \r\n    });\r\n    \r\n    const json = await response.json();\r\n    console.log(json)\r\n\r\n    if (!response.ok) {\r\n      setIsLoading(false);\r\n      setError(json.error);\r\n      return false;\r\n    }\r\n    if (response.ok) {\r\n      setIsLoading(false);\r\n      return true;\r\n    }\r\n  };\r\n  return { otpVerification, isLoading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,sBAAsB,MAAM,mCAAmC;AAGtE,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM;IAAEQ;EAAa,CAAC,GAAGP,sBAAsB,CAAC,CAAC;EAIjD,MAAMQ,eAAe,GAAG,MAAOC,QAAQ,IAAK;IAC1CH,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEdM,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAErB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;MAEzDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACT,cAAc,EAAE;MAChB,CAAC;MAEDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK,EAAEZ,YAAY,CAACa,IAAI,CAACD,KAAK;QAAGE,GAAG,EAAEZ;MAAS,CAAC;IAEzE,CAAC,CAAC;IAEF,MAAMa,IAAI,GAAG,MAAMV,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAACW,IAAI,CAAC;IAEjB,IAAI,CAACV,QAAQ,CAACW,EAAE,EAAE;MAChBjB,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACkB,IAAI,CAACnB,KAAK,CAAC;MACpB,OAAO,KAAK;IACd;IACA,IAAIS,QAAQ,CAACW,EAAE,EAAE;MACfjB,YAAY,CAAC,KAAK,CAAC;MACnB,OAAO,IAAI;IACb;EACF,CAAC;EACD,OAAO;IAAEE,eAAe;IAAEH,SAAS;IAAEF;EAAM,CAAC;AAC9C,CAAC;AAACD,EAAA,CAtCWD,kBAAkB;EAAA,QAGJD,sBAAsB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}